{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACpC,KAAMC,SAAS,CAAC,aAAD,CAAf;AAAA,KACIC,UAAU,CADd;AAAA,KAEIC,SAAS,YAFb;;AAIA,KAAIC,aAAa,IAAjB;AAAA,KACIC,QAAQ,IADZ;;AAGA;AACC,+BAAc;AAAA;;AACb,SAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACA;;AAHF;AAAA;AAAA,mCAKwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,iBAAYI,eAAZ,GAA8B,aAAK;AACrCd,wBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACG,MAFD;AAGAR,iBAAYS,SAAZ,GAAwB,aAAK;AAC/B,UAAG,CAACf,UAAJ,EAAgB;AACfA,oBAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,eAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,kBAAWC,KAAX,GAAmB,YAAW;AAC7B,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA,QAFD;AAGA;;AAEDE,cAAQJ,UAAR;AACG,MAVD;AAWAM,iBAAYW,OAAZ,GAAsB,aAAK;AACvBC,cAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACLf,aAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACE,MAHD;AAIN,KArBM,CAAP;AAsBA;AA5BF;AAAA;AAAA,iCA8BsBrB,UA9BtB,EA8BkC;AAC/BH,WAAOyB,OAAP,CAAe,iBAAS;AACrB,SAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEDzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,KALD;AAMD;AArCF;AAAA;AAAA,qCAuC0B;AACxB,QAAG5B,UAAH,EAAe;AACd;AACAC;AACAD,kBAAa,IAAb;AACA;AACD;AA7CF;;AAAA;AAAA;AA+CA,CAvDuB,EAAxB;;AAyDA","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\tconst stores = ['negociacoes'], \r\n\t\t\t  version = 5, \r\n\t\t\t  dbName = 'aluraframe';\r\n\r\n\tvar connection = null, \r\n\t\t   close = null;\r\n\r\n\treturn class ConnectionFactory {\r\n\t\tconstructor() {\r\n\t\t\tthrow new Error(\"Não é possível criar instancias do ConnectionFactory\");\r\n\t\t}\r\n\t\t\r\n\t\tstatic getConnection() {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n\t\t\t\t      openRequest.onupgradeneeded = e => {\r\n\t\t\t\t\t\t  ConnectionFactory._createStores(e.target.result);\r\n\t\t\t\t      }\r\n\t\t\t\t      openRequest.onsuccess = e => {\r\n\t\t\t\t\t\t  if(!connection) {\r\n\t\t\t\t\t\t\t  connection = e.target.result;\r\n\t\t\t\t\t\t\t  close = connection.close.bind(connection);\r\n\t\t\t\t\t\t\t  connection.close = function() {\r\n\t\t\t\t\t\t\t  \tthrow new Error(\"Você não pode fechar diretamente a conexão\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  resolve(connection);\r\n\t\t\t\t      }\r\n\t\t\t\t      openRequest.onerror = e => {\r\n\t\t\t\t        \t\tconsole.log(e.target.error);\r\n\t\t\t\t\t\t  \treject(e.target.error.name);\r\n\t\t\t\t      }\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tstatic _createStores(connection) {\r\n\t\t\t\tstores.forEach(store => {\r\n\t\t\t\t  \tif(connection.objectStoreNames.contains(store))\r\n\t\t\t\t\t\tconnection.deleteObjectStore(store);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconnection.createObjectStore(store, {autoIncrement: true});\r\n\t\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tstatic closeConnection() {\r\n\t\t\tif(connection) {\r\n\t\t\t\t//Reflect.apply(close, connection, []);\r\n\t\t\t\tclose();\r\n\t\t\t\tconnection = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n})();\r\n\r\n//DAO = Data Access Object\r\n\r\n"]}